# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Pool::Rules;
use base qw(Exporter);
use base qw(DynaLoader);
require Pool::Fiz;
package Pool::Rulesc;
bootstrap Pool::Rules;
package Pool::Rules;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Pool::Rules;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Pool::Rules;

*__rshift__ = *Pool::Rulesc::__rshift__;
*getRulesVersion = *Pool::Rulesc::getRulesVersion;

############# Class : Pool::Rules::GameShot ##############

package Pool::Rules::GameShot;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Pool::Rules );
%OWNER = ();
%ITERATORS = ();
*swig_params_get = *Pool::Rulesc::GameShot_params_get;
*swig_params_set = *Pool::Rulesc::GameShot_params_set;
*swig_cue_x_get = *Pool::Rulesc::GameShot_cue_x_get;
*swig_cue_x_set = *Pool::Rulesc::GameShot_cue_x_set;
*swig_cue_y_get = *Pool::Rulesc::GameShot_cue_y_get;
*swig_cue_y_set = *Pool::Rulesc::GameShot_cue_y_set;
*swig_ball_get = *Pool::Rulesc::GameShot_ball_get;
*swig_ball_set = *Pool::Rulesc::GameShot_ball_set;
*swig_pocket_get = *Pool::Rulesc::GameShot_pocket_get;
*swig_pocket_set = *Pool::Rulesc::GameShot_pocket_set;
*swig_decision_get = *Pool::Rulesc::GameShot_decision_get;
*swig_decision_set = *Pool::Rulesc::GameShot_decision_set;
*swig_timeSpent_get = *Pool::Rulesc::GameShot_timeSpent_get;
*swig_timeSpent_set = *Pool::Rulesc::GameShot_timeSpent_set;
sub new {
    my $pkg = shift;
    my $self = Pool::Rulesc::new_GameShot(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Pool::Rulesc::delete_GameShot($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Pool::Rules::GameState ##############

package Pool::Rules::GameState;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Pool::Rules );
%OWNER = ();
%ITERATORS = ();
*Factory = *Pool::Rulesc::GameState_Factory;
*RackedState = *Pool::Rulesc::GameState_RackedState;
*toString = *Pool::Rulesc::GameState_toString;
*gameType = *Pool::Rulesc::GameState_gameType;
*isOpenTable = *Pool::Rulesc::GameState_isOpenTable;
*getTurnType = *Pool::Rulesc::GameState_getTurnType;
*playingSolids = *Pool::Rulesc::GameState_playingSolids;
*curPlayerStarted = *Pool::Rulesc::GameState_curPlayerStarted;
*timeLeft = *Pool::Rulesc::GameState_timeLeft;
*timeLeftOpp = *Pool::Rulesc::GameState_timeLeftOpp;
*tableState = *Pool::Rulesc::GameState_tableState;
*executeShot = *Pool::Rulesc::GameState_executeShot;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Pool::Rulesc::delete_GameState($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Pool::Rules;

*DEC_NO_DECISION = *Pool::Rulesc::DEC_NO_DECISION;
*DEC_KEEP_SHOOTING = *Pool::Rulesc::DEC_KEEP_SHOOTING;
*DEC_RERACK = *Pool::Rulesc::DEC_RERACK;
*DEC_EIGHTBALL_RERACK_OPP_SHOOT = *Pool::Rulesc::DEC_EIGHTBALL_RERACK_OPP_SHOOT;
*DEC_CONCEDE = *Pool::Rulesc::DEC_CONCEDE;
*DEC_NINEBALL_PUSH_OUT = *Pool::Rulesc::DEC_NINEBALL_PUSH_OUT;
*TT_NORMAL = *Pool::Rulesc::TT_NORMAL;
*TT_BALL_IN_HAND = *Pool::Rulesc::TT_BALL_IN_HAND;
*TT_BEHIND_LINE = *Pool::Rulesc::TT_BEHIND_LINE;
*TT_RESERVED = *Pool::Rulesc::TT_RESERVED;
*TT_BREAK = *Pool::Rulesc::TT_BREAK;
*TT_WIN = *Pool::Rulesc::TT_WIN;
*TT_EIGHTBALL_FOUL_ON_BREAK = *Pool::Rulesc::TT_EIGHTBALL_FOUL_ON_BREAK;
*TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK = *Pool::Rulesc::TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK;
*TT_NINEBALL_FIRST_SHOT = *Pool::Rulesc::TT_NINEBALL_FIRST_SHOT;
*TT_NINEBALL_PUSH_OUT = *Pool::Rulesc::TT_NINEBALL_PUSH_OUT;
*GT_NONE = *Pool::Rulesc::GT_NONE;
*GT_EIGHTBALL = *Pool::Rulesc::GT_EIGHTBALL;
*GT_NINEBALL = *Pool::Rulesc::GT_NINEBALL;
*GT_SNOOKER = *Pool::Rulesc::GT_SNOOKER;
*GT_ONEPOCKET = *Pool::Rulesc::GT_ONEPOCKET;
*SR_OK = *Pool::Rulesc::SR_OK;
*SR_OK_LOST_TURN = *Pool::Rulesc::SR_OK_LOST_TURN;
*SR_BAD_PARAMS = *Pool::Rulesc::SR_BAD_PARAMS;
*SR_SHOT_IMPOSSIBLE = *Pool::Rulesc::SR_SHOT_IMPOSSIBLE;
*SR_TIMEOUT = *Pool::Rulesc::SR_TIMEOUT;
1;
