# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Rules', [dirname(__file__)])
        except ImportError:
            import _Rules
            return _Rules
        if fp is not None:
            try:
                _mod = imp.load_module('_Rules', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Rules = swig_import_helper()
    del swig_import_helper
else:
    import _Rules
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import FastFiz

_Rules.DEC_NO_DECISION_swigconstant(_Rules)
DEC_NO_DECISION = _Rules.DEC_NO_DECISION

_Rules.DEC_KEEP_SHOOTING_swigconstant(_Rules)
DEC_KEEP_SHOOTING = _Rules.DEC_KEEP_SHOOTING

_Rules.DEC_RERACK_swigconstant(_Rules)
DEC_RERACK = _Rules.DEC_RERACK

_Rules.DEC_EIGHTBALL_RERACK_OPP_SHOOT_swigconstant(_Rules)
DEC_EIGHTBALL_RERACK_OPP_SHOOT = _Rules.DEC_EIGHTBALL_RERACK_OPP_SHOOT

_Rules.DEC_CONCEDE_swigconstant(_Rules)
DEC_CONCEDE = _Rules.DEC_CONCEDE

_Rules.DEC_NINEBALL_PUSH_OUT_swigconstant(_Rules)
DEC_NINEBALL_PUSH_OUT = _Rules.DEC_NINEBALL_PUSH_OUT

_Rules.TT_NORMAL_swigconstant(_Rules)
TT_NORMAL = _Rules.TT_NORMAL

_Rules.TT_BALL_IN_HAND_swigconstant(_Rules)
TT_BALL_IN_HAND = _Rules.TT_BALL_IN_HAND

_Rules.TT_BEHIND_LINE_swigconstant(_Rules)
TT_BEHIND_LINE = _Rules.TT_BEHIND_LINE

_Rules.TT_RESERVED_swigconstant(_Rules)
TT_RESERVED = _Rules.TT_RESERVED

_Rules.TT_BREAK_swigconstant(_Rules)
TT_BREAK = _Rules.TT_BREAK

_Rules.TT_WIN_swigconstant(_Rules)
TT_WIN = _Rules.TT_WIN

_Rules.TT_EIGHTBALL_FOUL_ON_BREAK_swigconstant(_Rules)
TT_EIGHTBALL_FOUL_ON_BREAK = _Rules.TT_EIGHTBALL_FOUL_ON_BREAK

_Rules.TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK_swigconstant(_Rules)
TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK = _Rules.TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK

_Rules.TT_NINEBALL_FIRST_SHOT_swigconstant(_Rules)
TT_NINEBALL_FIRST_SHOT = _Rules.TT_NINEBALL_FIRST_SHOT

_Rules.TT_NINEBALL_PUSH_OUT_swigconstant(_Rules)
TT_NINEBALL_PUSH_OUT = _Rules.TT_NINEBALL_PUSH_OUT

def __rshift__(arg1, tt):
    return _Rules.__rshift__(arg1, tt)
__rshift__ = _Rules.__rshift__

_Rules.GT_NONE_swigconstant(_Rules)
GT_NONE = _Rules.GT_NONE

_Rules.GT_EIGHTBALL_swigconstant(_Rules)
GT_EIGHTBALL = _Rules.GT_EIGHTBALL

_Rules.GT_NINEBALL_swigconstant(_Rules)
GT_NINEBALL = _Rules.GT_NINEBALL

_Rules.GT_SNOOKER_swigconstant(_Rules)
GT_SNOOKER = _Rules.GT_SNOOKER

_Rules.GT_ONEPOCKET_swigconstant(_Rules)
GT_ONEPOCKET = _Rules.GT_ONEPOCKET

_Rules.SR_OK_swigconstant(_Rules)
SR_OK = _Rules.SR_OK

_Rules.SR_OK_LOST_TURN_swigconstant(_Rules)
SR_OK_LOST_TURN = _Rules.SR_OK_LOST_TURN

_Rules.SR_BAD_PARAMS_swigconstant(_Rules)
SR_BAD_PARAMS = _Rules.SR_BAD_PARAMS

_Rules.SR_SHOT_IMPOSSIBLE_swigconstant(_Rules)
SR_SHOT_IMPOSSIBLE = _Rules.SR_SHOT_IMPOSSIBLE

_Rules.SR_TIMEOUT_swigconstant(_Rules)
SR_TIMEOUT = _Rules.SR_TIMEOUT
class GameShot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameShot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameShot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _Rules.GameShot_params_set
    __swig_getmethods__["params"] = _Rules.GameShot_params_get
    if _newclass:
        params = _swig_property(_Rules.GameShot_params_get, _Rules.GameShot_params_set)
    __swig_setmethods__["cue_x"] = _Rules.GameShot_cue_x_set
    __swig_getmethods__["cue_x"] = _Rules.GameShot_cue_x_get
    if _newclass:
        cue_x = _swig_property(_Rules.GameShot_cue_x_get, _Rules.GameShot_cue_x_set)
    __swig_setmethods__["cue_y"] = _Rules.GameShot_cue_y_set
    __swig_getmethods__["cue_y"] = _Rules.GameShot_cue_y_get
    if _newclass:
        cue_y = _swig_property(_Rules.GameShot_cue_y_get, _Rules.GameShot_cue_y_set)
    __swig_setmethods__["ball"] = _Rules.GameShot_ball_set
    __swig_getmethods__["ball"] = _Rules.GameShot_ball_get
    if _newclass:
        ball = _swig_property(_Rules.GameShot_ball_get, _Rules.GameShot_ball_set)
    __swig_setmethods__["pocket"] = _Rules.GameShot_pocket_set
    __swig_getmethods__["pocket"] = _Rules.GameShot_pocket_get
    if _newclass:
        pocket = _swig_property(_Rules.GameShot_pocket_get, _Rules.GameShot_pocket_set)
    __swig_setmethods__["decision"] = _Rules.GameShot_decision_set
    __swig_getmethods__["decision"] = _Rules.GameShot_decision_get
    if _newclass:
        decision = _swig_property(_Rules.GameShot_decision_get, _Rules.GameShot_decision_set)
    __swig_setmethods__["timeSpent"] = _Rules.GameShot_timeSpent_set
    __swig_getmethods__["timeSpent"] = _Rules.GameShot_timeSpent_get
    if _newclass:
        timeSpent = _swig_property(_Rules.GameShot_timeSpent_get, _Rules.GameShot_timeSpent_set)

    def __init__(self):
        this = _Rules.new_GameShot()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Rules.delete_GameShot
    __del__ = lambda self: None
GameShot_swigregister = _Rules.GameShot_swigregister
GameShot_swigregister(GameShot)

class GameState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameState, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["Factory"] = lambda x: _Rules.GameState_Factory
    if _newclass:
        Factory = staticmethod(_Rules.GameState_Factory)
    __swig_getmethods__["RackedState"] = lambda x: _Rules.GameState_RackedState
    if _newclass:
        RackedState = staticmethod(_Rules.GameState_RackedState)

    def toString(self):
        return _Rules.GameState_toString(self)

    def gameType(self):
        return _Rules.GameState_gameType(self)

    def isOpenTable(self):
        return _Rules.GameState_isOpenTable(self)

    def getTurnType(self):
        return _Rules.GameState_getTurnType(self)

    def playingSolids(self):
        return _Rules.GameState_playingSolids(self)

    def curPlayerStarted(self):
        return _Rules.GameState_curPlayerStarted(self)

    def timeLeft(self):
        return _Rules.GameState_timeLeft(self)

    def timeLeftOpp(self):
        return _Rules.GameState_timeLeftOpp(self)

    def tableState(self):
        return _Rules.GameState_tableState(self)

    def executeShot(self, shot, shotObj=None):
        return _Rules.GameState_executeShot(self, shot, shotObj)
    __swig_destroy__ = _Rules.delete_GameState
    __del__ = lambda self: None
GameState_swigregister = _Rules.GameState_swigregister
GameState_swigregister(GameState)

def GameState_Factory(*args):
    return _Rules.GameState_Factory(*args)
GameState_Factory = _Rules.GameState_Factory

def GameState_RackedState(gameType):
    return _Rules.GameState_RackedState(gameType)
GameState_RackedState = _Rules.GameState_RackedState


def getRulesVersion():
    return _Rules.getRulesVersion()
getRulesVersion = _Rules.getRulesVersion
# This file is compatible with both classic and new-style classes.


