# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FastFiz', [dirname(__file__)])
        except ImportError:
            import _FastFiz
            return _FastFiz
        if fp is not None:
            try:
                _mod = imp.load_module('_FastFiz', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FastFiz = swig_import_helper()
    del swig_import_helper
else:
    import _FastFiz
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class ShotParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShotParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShotParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _FastFiz.ShotParams_a_set
    __swig_getmethods__["a"] = _FastFiz.ShotParams_a_get
    if _newclass:
        a = _swig_property(_FastFiz.ShotParams_a_get, _FastFiz.ShotParams_a_set)
    __swig_setmethods__["b"] = _FastFiz.ShotParams_b_set
    __swig_getmethods__["b"] = _FastFiz.ShotParams_b_get
    if _newclass:
        b = _swig_property(_FastFiz.ShotParams_b_get, _FastFiz.ShotParams_b_set)
    __swig_setmethods__["theta"] = _FastFiz.ShotParams_theta_set
    __swig_getmethods__["theta"] = _FastFiz.ShotParams_theta_get
    if _newclass:
        theta = _swig_property(_FastFiz.ShotParams_theta_get, _FastFiz.ShotParams_theta_set)
    __swig_setmethods__["phi"] = _FastFiz.ShotParams_phi_set
    __swig_getmethods__["phi"] = _FastFiz.ShotParams_phi_get
    if _newclass:
        phi = _swig_property(_FastFiz.ShotParams_phi_get, _FastFiz.ShotParams_phi_set)
    __swig_setmethods__["v"] = _FastFiz.ShotParams_v_set
    __swig_getmethods__["v"] = _FastFiz.ShotParams_v_get
    if _newclass:
        v = _swig_property(_FastFiz.ShotParams_v_get, _FastFiz.ShotParams_v_set)

    def __init__(self, *args):
        this = _FastFiz.new_ShotParams(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _FastFiz.delete_ShotParams
    __del__ = lambda self: None
ShotParams_swigregister = _FastFiz.ShotParams_swigregister
ShotParams_swigregister(ShotParams)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _FastFiz.Point_x_set
    __swig_getmethods__["x"] = _FastFiz.Point_x_get
    if _newclass:
        x = _swig_property(_FastFiz.Point_x_get, _FastFiz.Point_x_set)
    __swig_setmethods__["y"] = _FastFiz.Point_y_set
    __swig_getmethods__["y"] = _FastFiz.Point_y_get
    if _newclass:
        y = _swig_property(_FastFiz.Point_y_get, _FastFiz.Point_y_set)

    def __init__(self, *args):
        this = _FastFiz.new_Point(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def toString(self):
        return _FastFiz.Point_toString(self)

    def fromString(self, s):
        return _FastFiz.Point_fromString(self, s)
    __swig_destroy__ = _FastFiz.delete_Point
    __del__ = lambda self: None
Point_swigregister = _FastFiz.Point_swigregister
Point_swigregister(Point)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _FastFiz.Vector_x_set
    __swig_getmethods__["x"] = _FastFiz.Vector_x_get
    if _newclass:
        x = _swig_property(_FastFiz.Vector_x_get, _FastFiz.Vector_x_set)
    __swig_setmethods__["y"] = _FastFiz.Vector_y_set
    __swig_getmethods__["y"] = _FastFiz.Vector_y_get
    if _newclass:
        y = _swig_property(_FastFiz.Vector_y_get, _FastFiz.Vector_y_set)
    __swig_setmethods__["z"] = _FastFiz.Vector_z_set
    __swig_getmethods__["z"] = _FastFiz.Vector_z_get
    if _newclass:
        z = _swig_property(_FastFiz.Vector_z_get, _FastFiz.Vector_z_set)

    def __init__(self, *args):
        this = _FastFiz.new_Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def toString(self):
        return _FastFiz.Vector_toString(self)

    def fromString(self, s):
        return _FastFiz.Vector_fromString(self, s)
    __swig_destroy__ = _FastFiz.delete_Vector
    __del__ = lambda self: None
Vector_swigregister = _FastFiz.Vector_swigregister
Vector_swigregister(Vector)

class Ball(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ball, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ball, name)
    __repr__ = _swig_repr
    NOTINPLAY = _FastFiz.Ball_NOTINPLAY
    STATIONARY = _FastFiz.Ball_STATIONARY
    SPINNING = _FastFiz.Ball_SPINNING
    SLIDING = _FastFiz.Ball_SLIDING
    ROLLING = _FastFiz.Ball_ROLLING
    POCKETED_SW = _FastFiz.Ball_POCKETED_SW
    POCKETED_W = _FastFiz.Ball_POCKETED_W
    POCKETED_NW = _FastFiz.Ball_POCKETED_NW
    POCKETED_NE = _FastFiz.Ball_POCKETED_NE
    POCKETED_E = _FastFiz.Ball_POCKETED_E
    POCKETED_SE = _FastFiz.Ball_POCKETED_SE
    SLIDING_SPINNING = _FastFiz.Ball_SLIDING_SPINNING
    ROLLING_SPINNING = _FastFiz.Ball_ROLLING_SPINNING
    UNKNOWN_STATE = _FastFiz.Ball_UNKNOWN_STATE
    CUE = _FastFiz.Ball_CUE
    ONE = _FastFiz.Ball_ONE
    TWO = _FastFiz.Ball_TWO
    THREE = _FastFiz.Ball_THREE
    FOUR = _FastFiz.Ball_FOUR
    FIVE = _FastFiz.Ball_FIVE
    SIX = _FastFiz.Ball_SIX
    SEVEN = _FastFiz.Ball_SEVEN
    EIGHT = _FastFiz.Ball_EIGHT
    NINE = _FastFiz.Ball_NINE
    TEN = _FastFiz.Ball_TEN
    ELEVEN = _FastFiz.Ball_ELEVEN
    TWELVE = _FastFiz.Ball_TWELVE
    THIRTEEN = _FastFiz.Ball_THIRTEEN
    FOURTEEN = _FastFiz.Ball_FOURTEEN
    FIFTEEN = _FastFiz.Ball_FIFTEEN
    UNKNOWN_ID = _FastFiz.Ball_UNKNOWN_ID

    def __init__(self, *args):
        this = _FastFiz.new_Ball(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getRadius(self):
        return _FastFiz.Ball_getRadius(self)

    def getID(self):
        return _FastFiz.Ball_getID(self)

    def getIDString(self):
        return _FastFiz.Ball_getIDString(self)

    def getState(self):
        return _FastFiz.Ball_getState(self)

    def getStateString(self):
        return _FastFiz.Ball_getStateString(self)

    def getPos(self):
        return _FastFiz.Ball_getPos(self)

    def getVelocity(self):
        return _FastFiz.Ball_getVelocity(self)

    def getSpin(self):
        return _FastFiz.Ball_getSpin(self)

    def setID(self, t):
        return _FastFiz.Ball_setID(self, t)

    def setPos(self, pos):
        return _FastFiz.Ball_setPos(self, pos)

    def setVelocity(self, vel):
        return _FastFiz.Ball_setVelocity(self, vel)

    def setSpin(self, spin):
        return _FastFiz.Ball_setSpin(self, spin)

    def setState(self, s):
        return _FastFiz.Ball_setState(self, s)

    def isInPlay(self):
        return _FastFiz.Ball_isInPlay(self)

    def isPocketed(self):
        return _FastFiz.Ball_isPocketed(self)

    def updateState(self, VERBOSE=False):
        return _FastFiz.Ball_updateState(self, VERBOSE)

    def toString(self):
        return _FastFiz.Ball_toString(self)

    def fromString(self, s):
        return _FastFiz.Ball_fromString(self, s)
    __swig_destroy__ = _FastFiz.delete_Ball
    __del__ = lambda self: None
Ball_swigregister = _FastFiz.Ball_swigregister
Ball_swigregister(Ball)

class Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    g = _FastFiz.Table_g
    MU_SLIDING = _FastFiz.Table_MU_SLIDING
    MU_ROLLING = _FastFiz.Table_MU_ROLLING
    MU_SPINNING = _FastFiz.Table_MU_SPINNING
    TABLE_LENGTH = _FastFiz.Table_TABLE_LENGTH
    TABLE_WIDTH = _FastFiz.Table_TABLE_WIDTH
    CORNER_POCKET_WIDTH = _FastFiz.Table_CORNER_POCKET_WIDTH
    SIDE_POCKET_WIDTH = _FastFiz.Table_SIDE_POCKET_WIDTH
    RAIL_HEIGHT = _FastFiz.Table_RAIL_HEIGHT
    CUE_LENGTH = _FastFiz.Table_CUE_LENGTH
    RAIL_VEL_DAMPING_X = _FastFiz.Table_RAIL_VEL_DAMPING_X
    RAIL_VEL_DAMPING_Y = _FastFiz.Table_RAIL_VEL_DAMPING_Y
    RAIL_SPIN_DAMPING = _FastFiz.Table_RAIL_SPIN_DAMPING
    RAIL_VEL_ANGLE_ADJ = _FastFiz.Table_RAIL_VEL_ANGLE_ADJ
    RAIL_ZSPIN_ANGLE_ADJ = _FastFiz.Table_RAIL_ZSPIN_ANGLE_ADJ
    CUE_MASS = _FastFiz.Table_CUE_MASS
    I = _FastFiz.Table_I
    SW_POCKET = _FastFiz.Table_SW_POCKET
    SW_RAIL = _FastFiz.Table_SW_RAIL
    W_POCKET = _FastFiz.Table_W_POCKET
    NW_RAIL = _FastFiz.Table_NW_RAIL
    NW_POCKET = _FastFiz.Table_NW_POCKET
    N_RAIL = _FastFiz.Table_N_RAIL
    NE_POCKET = _FastFiz.Table_NE_POCKET
    NE_RAIL = _FastFiz.Table_NE_RAIL
    E_POCKET = _FastFiz.Table_E_POCKET
    SE_RAIL = _FastFiz.Table_SE_RAIL
    SE_POCKET = _FastFiz.Table_SE_POCKET
    S_RAIL = _FastFiz.Table_S_RAIL
    UNKNOWN_BOUNDARY = _FastFiz.Table_UNKNOWN_BOUNDARY
    SW = _FastFiz.Table_SW
    W = _FastFiz.Table_W
    NW = _FastFiz.Table_NW
    NE = _FastFiz.Table_NE
    E = _FastFiz.Table_E
    SE = _FastFiz.Table_SE
    UNKNOWN_POCKET = _FastFiz.Table_UNKNOWN_POCKET

    def __init__(self, *args):
        this = _FastFiz.new_Table(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getLength(self):
        return _FastFiz.Table_getLength(self)

    def getWidth(self):
        return _FastFiz.Table_getWidth(self)

    def getHeadString(self):
        return _FastFiz.Table_getHeadString(self)

    def getFootSpot(self):
        return _FastFiz.Table_getFootSpot(self)

    def setCueLength(self, length):
        return _FastFiz.Table_setCueLength(self, length)

    def getCueLength(self):
        return _FastFiz.Table_getCueLength(self)

    def setRailHeight(self, height):
        return _FastFiz.Table_setRailHeight(self, height)

    def getRailHeight(self):
        return _FastFiz.Table_getRailHeight(self)

    def setMuSliding(self, mu):
        return _FastFiz.Table_setMuSliding(self, mu)

    def getMuSliding(self):
        return _FastFiz.Table_getMuSliding(self)

    def setMuRolling(self, mu):
        return _FastFiz.Table_setMuRolling(self, mu)

    def getMuRolling(self):
        return _FastFiz.Table_getMuRolling(self)

    def setMuSpinning(self, mu):
        return _FastFiz.Table_setMuSpinning(self, mu)

    def getMuSpinning(self):
        return _FastFiz.Table_getMuSpinning(self)

    def getPocketCenter(self, pocket):
        return _FastFiz.Table_getPocketCenter(self, pocket)

    def getPocketRight(self, pocket):
        return _FastFiz.Table_getPocketRight(self, pocket)

    def getPocketLeft(self, pocket):
        return _FastFiz.Table_getPocketLeft(self, pocket)
    __swig_getmethods__["defaultTable"] = lambda x: _FastFiz.Table_defaultTable
    if _newclass:
        defaultTable = staticmethod(_FastFiz.Table_defaultTable)
    __swig_getmethods__["stateFromPocket"] = lambda x: _FastFiz.Table_stateFromPocket
    if _newclass:
        stateFromPocket = staticmethod(_FastFiz.Table_stateFromPocket)
    __swig_getmethods__["pocketFromBndId"] = lambda x: _FastFiz.Table_pocketFromBndId
    if _newclass:
        pocketFromBndId = staticmethod(_FastFiz.Table_pocketFromBndId)
    __swig_getmethods__["bndIdFromPocket"] = lambda x: _FastFiz.Table_bndIdFromPocket
    if _newclass:
        bndIdFromPocket = staticmethod(_FastFiz.Table_bndIdFromPocket)
    __swig_getmethods__["boundaryName"] = lambda x: _FastFiz.Table_boundaryName
    if _newclass:
        boundaryName = staticmethod(_FastFiz.Table_boundaryName)
    __swig_getmethods__["pocketName"] = lambda x: _FastFiz.Table_pocketName
    if _newclass:
        pocketName = staticmethod(_FastFiz.Table_pocketName)
    __swig_destroy__ = _FastFiz.delete_Table
    __del__ = lambda self: None
Table_swigregister = _FastFiz.Table_swigregister
Table_swigregister(Table)

def Table_defaultTable():
    return _FastFiz.Table_defaultTable()
Table_defaultTable = _FastFiz.Table_defaultTable

def Table_stateFromPocket(pocket):
    return _FastFiz.Table_stateFromPocket(pocket)
Table_stateFromPocket = _FastFiz.Table_stateFromPocket

def Table_pocketFromBndId(bnd):
    return _FastFiz.Table_pocketFromBndId(bnd)
Table_pocketFromBndId = _FastFiz.Table_pocketFromBndId

def Table_bndIdFromPocket(pocket):
    return _FastFiz.Table_bndIdFromPocket(pocket)
Table_bndIdFromPocket = _FastFiz.Table_bndIdFromPocket

def Table_boundaryName(boundary):
    return _FastFiz.Table_boundaryName(boundary)
Table_boundaryName = _FastFiz.Table_boundaryName

def Table_pocketName(pocket):
    return _FastFiz.Table_pocketName(pocket)
Table_pocketName = _FastFiz.Table_pocketName

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NO_EVENT = _FastFiz.Event_NO_EVENT
    STATE_CHANGE = _FastFiz.Event_STATE_CHANGE
    BALL_COLLISION = _FastFiz.Event_BALL_COLLISION
    RAIL_COLLISION = _FastFiz.Event_RAIL_COLLISION
    POCKETED = _FastFiz.Event_POCKETED
    CUE_STRIKE = _FastFiz.Event_CUE_STRIKE
    MISCUE = _FastFiz.Event_MISCUE
    UNKNOWN_EVENT = _FastFiz.Event_UNKNOWN_EVENT

    def getTime(self):
        return _FastFiz.Event_getTime(self)

    def getBall1(self):
        return _FastFiz.Event_getBall1(self)

    def getBall1Data(self):
        return _FastFiz.Event_getBall1Data(self)

    def __lt__(self, other):
        return _FastFiz.Event___lt__(self, other)
    __swig_getmethods__["eventCmp"] = lambda x: _FastFiz.Event_eventCmp
    if _newclass:
        eventCmp = staticmethod(_FastFiz.Event_eventCmp)

    def toString(self):
        return _FastFiz.Event_toString(self)

    def getType(self):
        return _FastFiz.Event_getType(self)

    def getTypeString(self):
        return _FastFiz.Event_getTypeString(self)

    def getBall2(self):
        return _FastFiz.Event_getBall2(self)

    def getBall2Data(self):
        return _FastFiz.Event_getBall2Data(self)

    def relatedTo(self, other):
        return _FastFiz.Event_relatedTo(self, other)

    def involvesBall(self, b):
        return _FastFiz.Event_involvesBall(self, b)
    __swig_destroy__ = _FastFiz.delete_Event
    __del__ = lambda self: None

    def handle(self, ts, VERBOSE=False):
        return _FastFiz.Event_handle(self, ts, VERBOSE)
Event_swigregister = _FastFiz.Event_swigregister
Event_swigregister(Event)

def Event_eventCmp(event1, event2):
    return _FastFiz.Event_eventCmp(event1, event2)
Event_eventCmp = _FastFiz.Event_eventCmp

class StateChangeEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateChangeEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateChangeEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b):
        this = _FastFiz.new_StateChangeEvent(time, b)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _FastFiz.StateChangeEvent_getType(self)

    def getTypeString(self):
        return _FastFiz.StateChangeEvent_getTypeString(self)
    __swig_destroy__ = _FastFiz.delete_StateChangeEvent
    __del__ = lambda self: None
StateChangeEvent_swigregister = _FastFiz.StateChangeEvent_swigregister
StateChangeEvent_swigregister(StateChangeEvent)

class BallCollisionEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallCollisionEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallCollisionEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b1, b2):
        this = _FastFiz.new_BallCollisionEvent(time, b1, b2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _FastFiz.BallCollisionEvent_getType(self)

    def getTypeString(self):
        return _FastFiz.BallCollisionEvent_getTypeString(self)

    def relatedTo(self, other):
        return _FastFiz.BallCollisionEvent_relatedTo(self, other)

    def involvesBall(self, b):
        return _FastFiz.BallCollisionEvent_involvesBall(self, b)
    __swig_destroy__ = _FastFiz.delete_BallCollisionEvent
    __del__ = lambda self: None

    def getBall2(self):
        return _FastFiz.BallCollisionEvent_getBall2(self)

    def getBall2Data(self):
        return _FastFiz.BallCollisionEvent_getBall2Data(self)
BallCollisionEvent_swigregister = _FastFiz.BallCollisionEvent_swigregister
BallCollisionEvent_swigregister(BallCollisionEvent)

class RailCollisionEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RailCollisionEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RailCollisionEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b, rail):
        this = _FastFiz.new_RailCollisionEvent(time, b, rail)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _FastFiz.RailCollisionEvent_getType(self)

    def getTypeString(self):
        return _FastFiz.RailCollisionEvent_getTypeString(self)

    def getRail(self):
        return _FastFiz.RailCollisionEvent_getRail(self)
    __swig_destroy__ = _FastFiz.delete_RailCollisionEvent
    __del__ = lambda self: None
RailCollisionEvent_swigregister = _FastFiz.RailCollisionEvent_swigregister
RailCollisionEvent_swigregister(RailCollisionEvent)

class PocketedEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PocketedEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PocketedEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b, pocket):
        this = _FastFiz.new_PocketedEvent(time, b, pocket)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _FastFiz.PocketedEvent_getType(self)

    def getTypeString(self):
        return _FastFiz.PocketedEvent_getTypeString(self)

    def getPocket(self):
        return _FastFiz.PocketedEvent_getPocket(self)
    __swig_destroy__ = _FastFiz.delete_PocketedEvent
    __del__ = lambda self: None
PocketedEvent_swigregister = _FastFiz.PocketedEvent_swigregister
PocketedEvent_swigregister(PocketedEvent)

class CueStrikeEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CueStrikeEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CueStrikeEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _FastFiz.new_CueStrikeEvent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getType(self):
        return _FastFiz.CueStrikeEvent_getType(self)

    def getTypeString(self):
        return _FastFiz.CueStrikeEvent_getTypeString(self)

    def getParams(self):
        return _FastFiz.CueStrikeEvent_getParams(self)
    __swig_destroy__ = _FastFiz.delete_CueStrikeEvent
    __del__ = lambda self: None
CueStrikeEvent_swigregister = _FastFiz.CueStrikeEvent_swigregister
CueStrikeEvent_swigregister(CueStrikeEvent)

class Shot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getEventList(self):
        return _FastFiz.Shot_getEventList(self)

    def getDuration(self):
        return _FastFiz.Shot_getDuration(self)
    __swig_destroy__ = _FastFiz.delete_Shot
    __del__ = lambda self: None
Shot_swigregister = _FastFiz.Shot_swigregister
Shot_swigregister(Shot)

class TableState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableState, name)
    __repr__ = _swig_repr
    MAX_VELOCITY = _FastFiz.TableState_MAX_VELOCITY
    MIN_THETA = _FastFiz.TableState_MIN_THETA
    MAX_THETA = _FastFiz.TableState_MAX_THETA
    OK_PRECONDITION = _FastFiz.TableState_OK_PRECONDITION
    BAD_A_VAL = _FastFiz.TableState_BAD_A_VAL
    BAD_B_VAL = _FastFiz.TableState_BAD_B_VAL
    BAD_THETA_VAL = _FastFiz.TableState_BAD_THETA_VAL
    BAD_PHI_VAL = _FastFiz.TableState_BAD_PHI_VAL
    BAD_V_VAL = _FastFiz.TableState_BAD_V_VAL
    BAD_X_VAL = _FastFiz.TableState_BAD_X_VAL
    BAD_Y_VAL = _FastFiz.TableState_BAD_Y_VAL
    CUE_STICK_COLLISION = _FastFiz.TableState_CUE_STICK_COLLISION
    BALL_OVERLAP = _FastFiz.TableState_BALL_OVERLAP

    def __init__(self, *args):
        this = _FastFiz.new_TableState(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getNumBalls(self):
        return _FastFiz.TableState_getNumBalls(self)

    def setBall(self, *args):
        return _FastFiz.TableState_setBall(self, *args)

    def spotBall(self, *args):
        return _FastFiz.TableState_spotBall(self, *args)

    def getBall(self, btype):
        return _FastFiz.TableState_getBall(self, btype)

    def getTable(self):
        return _FastFiz.TableState_getTable(self)

    def isValidBallPlacement(self, VERBOSE=False):
        return _FastFiz.TableState_isValidBallPlacement(self, VERBOSE)

    def isPhysicallyPossible(self, shotParams, VERBOSE=False):
        return _FastFiz.TableState_isPhysicallyPossible(self, shotParams, VERBOSE)

    def addNoise(self, dither):
        return _FastFiz.TableState_addNoise(self, dither)

    def executeShot(self, sp, verbose=False, errors=False):
        return _FastFiz.TableState_executeShot(self, sp, verbose, errors)

    def getFirstBallHit(self, sp):
        return _FastFiz.TableState_getFirstBallHit(self, sp)

    def toString(self):
        return _FastFiz.TableState_toString(self)

    def fromString(self, s):
        return _FastFiz.TableState_fromString(self, s)
    __swig_destroy__ = _FastFiz.delete_TableState
    __del__ = lambda self: None
TableState_swigregister = _FastFiz.TableState_swigregister
TableState_swigregister(TableState)


def getFastFizVersion():
    return _FastFiz.getFastFizVersion()
getFastFizVersion = _FastFiz.getFastFizVersion

def getTestState():
    return _FastFiz.getTestState()
getTestState = _FastFiz.getTestState

def getTestShotParams():
    return _FastFiz.getTestShotParams()
getTestShotParams = _FastFiz.getTestShotParams
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FastFiz.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _FastFiz.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FastFiz.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FastFiz.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FastFiz.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FastFiz.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FastFiz.SwigPyIterator_copy(self)

    def next(self):
        return _FastFiz.SwigPyIterator_next(self)

    def __next__(self):
        return _FastFiz.SwigPyIterator___next__(self)

    def previous(self):
        return _FastFiz.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FastFiz.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FastFiz.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FastFiz.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FastFiz.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FastFiz.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FastFiz.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FastFiz.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FastFiz.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class EventVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _FastFiz.EventVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _FastFiz.EventVector___nonzero__(self)

    def __bool__(self):
        return _FastFiz.EventVector___bool__(self)

    def __len__(self):
        return _FastFiz.EventVector___len__(self)

    def __getslice__(self, i, j):
        return _FastFiz.EventVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _FastFiz.EventVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _FastFiz.EventVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _FastFiz.EventVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _FastFiz.EventVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _FastFiz.EventVector___setitem__(self, *args)

    def pop(self):
        return _FastFiz.EventVector_pop(self)

    def append(self, x):
        return _FastFiz.EventVector_append(self, x)

    def empty(self):
        return _FastFiz.EventVector_empty(self)

    def size(self):
        return _FastFiz.EventVector_size(self)

    def swap(self, v):
        return _FastFiz.EventVector_swap(self, v)

    def begin(self):
        return _FastFiz.EventVector_begin(self)

    def end(self):
        return _FastFiz.EventVector_end(self)

    def rbegin(self):
        return _FastFiz.EventVector_rbegin(self)

    def rend(self):
        return _FastFiz.EventVector_rend(self)

    def clear(self):
        return _FastFiz.EventVector_clear(self)

    def get_allocator(self):
        return _FastFiz.EventVector_get_allocator(self)

    def pop_back(self):
        return _FastFiz.EventVector_pop_back(self)

    def erase(self, *args):
        return _FastFiz.EventVector_erase(self, *args)

    def __init__(self, *args):
        this = _FastFiz.new_EventVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _FastFiz.EventVector_push_back(self, x)

    def front(self):
        return _FastFiz.EventVector_front(self)

    def back(self):
        return _FastFiz.EventVector_back(self)

    def assign(self, n, x):
        return _FastFiz.EventVector_assign(self, n, x)

    def resize(self, *args):
        return _FastFiz.EventVector_resize(self, *args)

    def insert(self, *args):
        return _FastFiz.EventVector_insert(self, *args)

    def reserve(self, n):
        return _FastFiz.EventVector_reserve(self, n)

    def capacity(self):
        return _FastFiz.EventVector_capacity(self)
    __swig_destroy__ = _FastFiz.delete_EventVector
    __del__ = lambda self: None
EventVector_swigregister = _FastFiz.EventVector_swigregister
EventVector_swigregister(EventVector)


_FastFiz.NT_UNDEFINED_swigconstant(_FastFiz)
NT_UNDEFINED = _FastFiz.NT_UNDEFINED

_FastFiz.NT_NONE_swigconstant(_FastFiz)
NT_NONE = _FastFiz.NT_NONE

_FastFiz.NT_GAUSSIAN_swigconstant(_FastFiz)
NT_GAUSSIAN = _FastFiz.NT_GAUSSIAN
class Noise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Noise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Noise, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["Factory"] = lambda x: _FastFiz.Noise_Factory
    if _newclass:
        Factory = staticmethod(_FastFiz.Noise_Factory)

    def toString(self):
        return _FastFiz.Noise_toString(self)

    def noiseType(self):
        return _FastFiz.Noise_noiseType(self)

    def applyNoise(self, sp):
        return _FastFiz.Noise_applyNoise(self, sp)
    __swig_destroy__ = _FastFiz.delete_Noise
    __del__ = lambda self: None
Noise_swigregister = _FastFiz.Noise_swigregister
Noise_swigregister(Noise)

def Noise_Factory(sourceString):
    return _FastFiz.Noise_Factory(sourceString)
Noise_Factory = _FastFiz.Noise_Factory

# This file is compatible with both classic and new-style classes.


