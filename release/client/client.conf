name = "newAgent";
password = "newPass";
endpoint = "http://altman.stanford.edu/pool/api.pl";

Comm: {
  RemoteSched = false;
  RemoteManager = false;

  RunLocalManager = false;
  localDelta = 1.5;
  localMin = 30.0;
};

General: {
  Parameters: {
    Noise: {
      Type = 1;
      a = 0.5; //0.8
      b = 0.5; //0.8
      theta = 0.1; // 0.03
      phi = 0.125; // 0.185
      V = 0.075; // 0.085
    };
    GameTime = 600.0; // seconds
  };
  BreakShot: {
    a = 0.0;
    b = 8.0;
    theta = 5.0;
    phi = 275.0;
    V = 4.5;
    cue_x = 0.48;
    cue_y = 1.67705;
  };
  Clustering: {
    Activated = true;
    LoggingActivated = false;
    MaxDistance = 0.3;
    EvaluationWeight = 1.0;
    NotOursWeight = 1.0;
    MinClusterProportionToExpand = 0.05;
  };
  StateEvaluators: {
    PickPocketSafetyThreshold = 0.3;
    PickPocketVarianceCutoff = 0.3;
    BaseBallPenaltyFactor = 4.0;
    BaseBallVarianceCutoff = 2.0;
    MarkovChainSafetyThreshold = 0.3;
    MarkovChainVarianceCutoff = 0.4;
  };
  LookupClasses: {
    WinProbabilityEstimatorFoulFrequency = 0.2;
    WinProbabilityFile = "/data/LookupTableData/winprobs-new.txt";  //appended to QMIN_HOME
  };
  FastFizThresh = 0.1;
};

Local: {
  OnlyOptimistic = false; //Also change number of samples to 1 if this is true
  OnlyMachineGun = false;
  MachineGunDeltaPhi = 0.1;
  MachineGunDeltaV = 0.45;
  MachineGunStage1 = 0.8;
  MachineGunNumSamples = 50;
  MachineGunNumKeeperShots = 10;
  MachineGunNumVariantShots = 50;
  MachineGunDumbMode = false;
  MachineGunWinScore = 2.0;
  MachineGunContinueScore = 1.0;
  MachineGunSwitchScore = 0.0;
  MachineGunLoseScore = -2.0;
  MachineGunFoulScore = -0.5;
  DE_file = "local";
  BasicSafety = false;
  CurvySafety = false;
  FastFiz = false;
  FastFizSampler = true;
  ShotTime = 0.0;  // set to nonzero to override time calculations
  NormalTimingFudgeFactor = 3;
  BallInHandOpenTimingFudgeFactor = 1;	
  DistributedEdge = 1.0;
  OldDistributedEdgeWeight = 1.0; //how much weight do we give to old distributed edge in update?
  MinVPerBasicShot = 3;
  MaxVPerBasicShot = 10;
  BallInHandVariations = 5;
  LevelOneTime = 0.75;
  LevelTwoTime = 0.15;
  LevelOneTaskCount = 50.0;
  ValidShotsPerBasicShot = 0.5;
  LevelTwoTaskCount = 3;    //How many shots do we create LevelTwo tasks from?
  CueRandomRestarts = 100;
  CueLocationCount = 2;
  CueLocationCountBehindHeadstring = 4;
  MinimumNumberLevelOneTasks = 0;
  MinimumNumberLevelTwoTasks = 0;
  LevelOneResultCount = 2;
  LevelOneInitSamples = 20;
  LevelOneEndgameSamples = 75;
  LevelOneAdditionalSamples=10;
  LevelOneMaxSamples = 100;
  LevelOneCutoffVariance = 1.0;
  LevelOneNumberStartVaryPhi = 500;  //After this many shots, start to vary phi
  LevelTwoLoggingOn = false;
  LevelTwoInitSamples = 15;
  LevelTwoAdditionalSamples=0;
  LevelTwoMaxSamples = 15;
  LevelTwoCutoffVariance = 1.0;
  LevelTwoNoiseless = true;
  LevelTwoNoiselessNumBallsSunkTurnOn = 4; //Level2 Noiseless-search on if at least this many balls sunk
  LevelTwoNoiselessNumKeeperShots = 4;
  LevelTwoNoiselessNumTotalShots = 100;
  SafetyTimeMultiplier = 2.0; //How much time should we alot for safeties (times normal shot)?
  NumSafetySamples = 20;
  NumKeeperSafeties = 20;
  SafetyEvalFoulPenalty = 100.0;
  SafetyEvalLossPenalty = 1000.0;
  SafetyEvalWinReward = 100.0;
  SafetyEvalSinkReward = 100.0;
  SafetyBIHAcceptableFoulFreq = 0.3;
  SafetyBIHTimeShrinkRate = 0.75; //How much less time for next bih spots (until we find good safety)?
  SafetyDeltaV = 2.5;	
  SuperSafetyNetDeltaPhi = 0.5;
  SuperSafetyNumberOfTasks = 10;
  MaximumNumberSafetyTasks = 30;
  MinimumNumberSafetyTasks = 0;
  SuperSafetyNumberToEvaluate = 20;
  minA = -8.0;
  maxA =  8.0;
  minB = -8.0;
  maxB =  8.0;
  minTheta = 5.0;
  maxTheta = 35.0;
  maxV = 4.5;
  maxImpossibleShots = 500;   
};

Remote: {
  DE_file = "remote";
  BasicSafety = false;
  CurvySafety = false;
  FastFiz = false;
  FastFizSampler = true;
  ShotTime = 0.0;  // set to nonzero to override time calculations
  NormalTimingFudgeFactor = 2;
  BallInHandOpenTimingFudgeFactor = 1;	
  DistributedEdge = 20.0;
  OldDistributedEdgeWeight = 0.9; //how much weight do we give to old distributed edge in update?
  VPerBasicShot = 3;
  MinVPerBasicShot = 3;
  MaxVPerBasicShot = 10;  
  BallInHandVariations = 10;
  LevelOneTime = 0.65;
  LevelTwoTime = 0.35;
  LevelOneTaskCount = 50.0;
  ValidShotsPerBasicShot = 0.5;
  LevelTwoTaskCount = 20;
  CueRandomRestarts = 100;
  CueLocationCount = 2;
  CueLocationCountBehindHeadstring = 4;
  MinimumNumberLevelOneTasks = 55;
  MinimumNumberLevelTwoTasks = 55;
  LevelOneResultCount = 2;
  LevelOneInitSamples = 25;
  LevelOneEndgameSamples = 100;
  LevelOneAdditionalSamples=10;
  LevelOneMaxSamples = 50;
  LevelOneCutoffVariance = 1.0;
  LevelOneNumberStartVaryPhi = 500;  //After this many shots, start to vary phi
  LevelTwoLoggingOn = false;
  LevelTwoInitSamples = 25;
  LevelTwoAdditionalSamples=10;
  LevelTwoMaxSamples = 50;
  LevelTwoCutoffVariance = 1.0;
  LevelTwoNoiseless = true;
  LevelTwoNoiselessNumBallsSunkTurnOn = 4;
  LevelTwoNoiselessNumKeeperShots = 5;
  LevelTwoNoiselessNumTotalShots = 500;	
  SafetyTimeMultiplier = 2.0;
  NumKeeperSafeties = 20;
  NumSafetySamples = 20;		 
  SafetyEvalFoulPenalty = 100.0;
  SafetyBIHAcceptableFoulFreq = 0.3;
  SafetyEvalLossPenalty = 1000.0;
  SafetyEvalWinReward = 100.0;
  SafetyEvalSinkReward = 100.0;
  SafetyDeltaV = 0.4;	
  SafetyBIHTimeShrinkRate = 0.75; //How much less time for next bih spots (until we find good safety)?
  SuperSafetyNumberOfTasks = 25;
  MaximumNumberSafetyTasks = 110;
  MinimumNumberSafetyTasks = 55;
  SuperSafetyNetDeltaPhi = 0.02;
  SuperSafetyNumberToEvaluate = 30;
  minA = -8.0;
  maxA =  8.0;
  minB = -8.0;
  maxB =  8.0;
  minTheta = 5.0;
  maxTheta = 35.0;
  maxV = 4.5;
  maxImpossibleShots = 500;   	
};
